name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch: # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run linting
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,.venv
        continue-on-error: true

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/skorp/hockey
            
            echo "üîÑ Pulling latest changes..."
            git pull origin main
            
            echo "üì¶ Building and starting containers..."
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d
            
            echo "üßπ Cleaning up old images..."
            docker image prune -f
            
            echo "‚úÖ Deployment completed successfully!"
            
            echo "üìä Container status:"
            docker-compose ps
      
      - name: Check deployment status
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/skorp/hockey
            
            echo "üîç Checking container status..."
            docker-compose ps
            
            echo ""
            echo "üè• Checking application health..."
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
            HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/health)
            
            if [ "$HEALTH_STATUS" = "200" ]; then
              echo "‚úÖ Application is healthy (HTTP $HEALTH_STATUS)"
            else
              echo "‚ùå Application health check failed (HTTP $HEALTH_STATUS)"
              echo "üìã Recent logs:"
              docker-compose logs --tail=50 bot
              exit 1
            fi
            
            echo ""
            echo "üíæ Checking database connection..."
            docker-compose exec -T db pg_isready -U user
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Database is healthy"
            else
              echo "‚ùå Database connection failed"
              docker-compose logs --tail=50 db
              exit 1
            fi
            
            echo ""
            echo "‚úÖ All health checks passed!"
      
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Deployment to production completed successfully!"
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment to production failed!"
