services:
  bot:
    build: .
    container_name: training_bot
    restart: always
    ports:
      - "${BOT_PORT:-5000}:5000"
    volumes:
      - ./.env:/app/.env
    environment:
      - TZ=${TZ:-Europe/Moscow}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED:-1}
    networks:
      - bot_network
    depends_on:
      db:
        condition: service_healthy
    dns:
      - ${DNS_PRIMARY:-8.8.8.8}
      - ${DNS_SECONDARY:-8.8.4.4}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:13-alpine
    container_name: training_bot_db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-training_bot}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-training_bot}"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  bot_network:
    driver: bridge

volumes:
  postgres_data: