from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, Application
from datetime import datetime
from ..models import Training, Registration
from ..config import Config
from ..database import db_session

def get_standard_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='register')],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='schedule')],
        [InlineKeyboardButton("–ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_registrations')]
    ])

def get_info_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–±–µ–∑ –∑–∞–ø–∏—Å–∏)"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='schedule')],
        [InlineKeyboardButton("–ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_registrations')]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = get_standard_keyboard()
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def register_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    training = db_session.query(Training)\
        .filter(Training.date_time > datetime.now())\
        .order_by(Training.date_time)\
        .first()
        
    if not training:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_reg = db_session.query(Registration)\
        .filter_by(training_id=training.id, user_id=user_id)\
        .first()
        
    if existing_reg:
        await query.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants_count = db_session.query(Registration)\
        .filter_by(training_id=training.id)\
        .count()
    
    if participants_count >= training.max_participants:
        await query.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã")
        return
        
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    registration = Registration(
        training_id=training.id,
        user_id=user_id,
        username=update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏",
        registered_at=datetime.now()
    )
    
    try:
        db_session.add(registration)
        db_session.commit()
        await query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –¥–µ—Ç–∞–ª—è–º–∏
        message = f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n"
        message += f"üìÖ {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
        message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count + 1}/{training.max_participants}"
        
        reply_markup = get_standard_keyboard()
        await query.message.reply_text(message, reply_markup=reply_markup)
    except Exception as e:
        db_session.rollback()
        print(f"Error during registration: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    trainings = db_session.query(Training)\
        .filter(Training.date_time > datetime.now())\
        .order_by(Training.date_time)\
        .all()
    
    if not trainings:
        await query.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        message = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        reply_markup = get_standard_keyboard()
        await query.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    message = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
    for training in trainings:
        participants = len(training.registrations)
        message += f"üïí {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
        message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants}/{training.max_participants}\n\n"
    
    reply_markup = get_standard_keyboard()
    
    await query.answer()
    await query.message.reply_text(message, reply_markup=reply_markup)

async def show_my_registrations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    registrations = db_session.query(Registration)\
        .join(Training)\
        .filter(Registration.user_id == user_id)\
        .filter(Training.date_time > datetime.now())\
        .order_by(Training.date_time)\
        .all()
    
    if not registrations:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        message = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        reply_markup = get_standard_keyboard()
        await query.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    message = "üéØ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    keyboard = []
    
    for reg in registrations:
        message += f"üìÖ {reg.training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É—Ç–±–æ–ª–∫–µ
        if reg.jersey_type:
            if reg.jersey_type.value == 'light':
                jersey_info = "‚ö™"
            else:
                jersey_info = "‚ö´"
            message += f"üëï {jersey_info}\n"
        else:
            message += f"üëï –§—É—Ç–±–æ–ª–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞\n"
        
        message += "\n"
        
        keyboard.append([InlineKeyboardButton(
            f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {reg.training.date_time.strftime('%d.%m.%Y %H:%M')}",
            callback_data=f'cancel_{reg.id}'
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.answer()
    await query.message.reply_text(message, reply_markup=reply_markup)

async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ callback_data
    reg_id = int(query.data.split('_')[1])
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    registration = db_session.query(Registration)\
        .filter_by(id=reg_id, user_id=user_id)\
        .first()
    
    if registration:
        db_session.delete(registration)
        db_session.commit()
        await query.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        message = "–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        reply_markup = get_standard_keyboard()
        await query.message.reply_text(message, reply_markup=reply_markup)
    else:
        await query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def view_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    training = db_session.query(Training)\
        .filter(Training.date_time > datetime.now())\
        .order_by(Training.date_time)\
        .first()
    
    if not training:
        message = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
        reply_markup = get_standard_keyboard()
        await update.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    registrations = db_session.query(Registration)\
        .filter_by(training_id=training.id)\
        .all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
    message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(registrations)}/{training.max_participants}):\n\n"
    
    if registrations:
        for i, reg in enumerate(registrations, 1):
            username = reg.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É—Ç–±–æ–ª–∫–µ
            if reg.jersey_type:
                if reg.jersey_type.value == 'light':
                    jersey_info = "‚ö™"
                else:
                    jersey_info = "‚ö´"
                message += f"{i}. {username} {jersey_info}\n"
            else:
                message += f"{i}. {username}\n"
    else:
        message += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è"
    
    reply_markup = get_info_keyboard()
    await update.message.reply_text(message, reply_markup=reply_markup)

async def show_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    user_id = update.effective_user.id
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    commands = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/commands - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/participants - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
"""
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id in Config.ADMIN_IDS:
        admin_commands = """
üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:

"""
        commands += admin_commands
    
    reply_markup = get_standard_keyboard()
    await update.message.reply_text(commands, reply_markup=reply_markup)

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def return_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    reply_markup = get_standard_keyboard()
    await query.answer()
    await query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

async def start_bot():
    token = Config.TELEGRAM_TOKEN
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("commands", show_commands))
    application.add_handler(CommandHandler("participants", view_participants))
    application.add_handler(CallbackQueryHandler(register_training, pattern="^register$"))
    application.add_handler(CallbackQueryHandler(show_schedule, pattern="^schedule$"))
    application.add_handler(CallbackQueryHandler(show_my_registrations, pattern="^my_registrations$"))
    application.add_handler(CallbackQueryHandler(cancel_registration, pattern="^cancel_\d+$"))
    application.add_handler(CallbackQueryHandler(return_to_start, pattern="^start$"))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    return application  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 