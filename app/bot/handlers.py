from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, Application
from telegram.error import NetworkError, TimedOut, BadRequest, Forbidden
from datetime import datetime
import logging
import re
from ..models import Training, Registration, UserPreferences, Player
from ..config import Config
from ..database import db_session
from .weekly_posts import start_weekly_post_scheduler, send_weekly_training_post

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
    if not text:
        return text
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ Markdown (parse_mode='Markdown')
    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ Markdown –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å: _ * [ ` 
    special_chars = ['_', '*', '[', '`']
    for char in special_chars:
        text = text.replace(char, '\\' + char)
    return text

def handle_telegram_errors(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram API"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            return await func(update, context)
        except NetworkError as e:
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
            try:
                if update.callback_query:
                    await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                elif update.message:
                    await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass
        except TimedOut as e:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –≤ {func.__name__}: {e}")
            try:
                if update.callback_query:
                    await update.callback_query.answer("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                elif update.message:
                    await update.message.reply_text("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass
        except BadRequest as e:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ {func.__name__}: {e}")
            try:
                if update.callback_query:
                    await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                elif update.message:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
            try:
                if update.callback_query:
                    await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                elif update.message:
                    await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass
    return wrapper

def get_standard_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='schedule')],
        [InlineKeyboardButton("–ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_registrations')]
    ])

def get_info_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–±–µ–∑ –∑–∞–ø–∏—Å–∏)"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='schedule')],
        [InlineKeyboardButton("–ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data='my_registrations')]
    ])

@handle_telegram_errors
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = get_standard_keyboard()
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

@handle_telegram_errors
async def register_training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç: register_123)
    training_id = int(query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    training = db_session.query(Training)\
        .filter(Training.id == training_id)\
        .filter(Training.date_time > datetime.now())\
        .first()
        
    if not training:
        await query.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∞")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_reg = db_session.query(Registration)\
        .filter_by(training_id=training.id, user_id=user_id)\
        .first()
        
    if existing_reg:
        await query.answer("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants_count = db_session.query(Registration)\
        .filter_by(training_id=training.id)\
        .count()
    
    if participants_count >= training.max_participants:
        await query.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_prefs = db_session.query(UserPreferences).filter_by(user_id=user_id).first()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º display_name –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ username
    display_name = user_prefs.display_name if user_prefs and user_prefs.display_name else None
    username = update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    registration = Registration(
        training_id=training.id,
        user_id=user_id,
        username=username,
        display_name=display_name,
        registered_at=datetime.now(),
        jersey_type=user_prefs.preferred_jersey_type if user_prefs else None,
        team_type=user_prefs.preferred_team_type if user_prefs else None,
        goalkeeper=user_prefs.goalkeeper if user_prefs else False
    )
    
    try:
        db_session.add(registration)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ players
        existing_player = db_session.query(Player).filter_by(user_id=user_id).first()
        if existing_player:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            existing_player.last_registration = datetime.now()
            existing_player.total_registrations += 1
            if display_name:
                existing_player.display_name = display_name
            existing_player.goalkeeper = user_prefs.goalkeeper if user_prefs else False
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            new_player = Player(
                user_id=user_id,
                username=username,
                display_name=display_name,
                goalkeeper=user_prefs.goalkeeper if user_prefs else False,
                first_registration=datetime.now(),
                last_registration=datetime.now(),
                total_registrations=1
            )
            db_session.add(new_player)
        
        db_session.commit()
        await query.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –¥–µ—Ç–∞–ª—è–º–∏
        message = f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n"
        message += f"üìÖ {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
        message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count + 1}/{training.max_participants}"
        
        reply_markup = get_standard_keyboard()
        await query.message.reply_text(message, reply_markup=reply_markup)
    except Exception as e:
        db_session.rollback()
        print(f"Error during registration: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@handle_telegram_errors
async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    trainings = db_session.query(Training)\
        .filter(Training.date_time > datetime.now())\
        .order_by(Training.date_time)\
        .all()
    
    if not trainings:
        await query.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        message = "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        reply_markup = get_standard_keyboard()
        await query.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    message = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
    for training in trainings:
        participants = len(training.registrations)
        message += f"üïí {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
        message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants}/{training.max_participants}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–∞–∂–¥—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–¥–æ 5)
    keyboard = []
    for training in trainings[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
        participants = len(training.registrations)
        date_str = training.date_time.strftime('%d.%m %H:%M')
        button_text = f"üìÖ {date_str} ({participants}/{training.max_participants})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'register_{training.id}')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.answer()
    await query.message.reply_text(message, reply_markup=reply_markup)

@handle_telegram_errors
async def show_my_registrations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    upcoming_registrations = db_session.query(Registration)\
        .join(Training)\
        .filter(Registration.user_id == user_id)\
        .filter(Training.date_time > datetime.now())\
        .order_by(Training.date_time)\
        .all()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–≤—Ä–∞—Ç–∞—Ä–µ–π)
    past_unpaid_registrations = db_session.query(Registration)\
        .join(Training)\
        .filter(Registration.user_id == user_id)\
        .filter(Training.date_time <= datetime.now())\
        .filter(Registration.paid == False)\
        .filter(Registration.goalkeeper == False)\
        .order_by(Training.date_time)\
        .all()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
    registrations = upcoming_registrations + past_unpaid_registrations
    
    if not registrations:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        message = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        reply_markup = get_standard_keyboard()
        await query.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π
    message = "üéØ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    
    for i, reg in enumerate(registrations, 1):
        message += f"{i}. üìÖ {reg.training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
        
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if reg.team_assigned:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É—Ç–±–æ–ª–∫–µ –∏ –∫–æ–º–∞–Ω–¥–µ
            if reg.jersey_type:
                if reg.jersey_type.value == 'light':
                    jersey_info = "‚ö™"
                else:
                    jersey_info = "‚ö´"
                message += f"   üëï {jersey_info}"
            else:
                message += f"   üëï –§—É—Ç–±–æ–ª–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
            
            if reg.team_type:
                if reg.team_type.value == 'first':
                    team_info = "1Ô∏è‚É£"
                else:
                    team_info = "2Ô∏è‚É£"
                message += f" {team_info}\n"
            else:
                message += f" –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞\n"
        else:
            message += f"   üëï –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–≤—Ä–∞—Ç–∞—Ä–µ–π)
        if not reg.goalkeeper:
            if reg.paid:
                message += f"   üí∞ –û–ø–ª–∞—á–µ–Ω–æ ‚úÖ\n"
            else:
                message += f"   üí∞ –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ ‚ùå\n"
        else:
            message += f"   ü•Ö –í—Ä–∞—Ç–∞—Ä—å\n"
        
        message += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—â–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–Ω–µ –≤—Ä–∞—Ç–∞—Ä–∏), –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
    unpaid_registrations = [reg for reg in registrations if not reg.paid and not reg.goalkeeper]
    if unpaid_registrations:
        keyboard.append([InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏–ª", callback_data='mark_payment')])
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)
    if upcoming_registrations:
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='cancel_registration')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data='view_participants')])
    keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.answer()
    await query.message.reply_text(message, reply_markup=reply_markup)

async def mark_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ callback_data
    registration_id = int(query.data.split('_')[1])
    
    # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    registration = db_session.query(Registration).filter_by(id=registration_id, user_id=user_id).first()
    
    if not registration:
        await query.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–ª–∞—Ç–∏–ª —É–∂–µ
    if registration.paid:
        await query.answer("–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –æ–ø–ª–∞—Ç—É –¥–ª—è —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—É—é
    registration.paid = True
    db_session.commit()
    
    await query.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await show_my_registrations(update, context)

async def view_training_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    trainings = db_session.query(Training)\
        .filter(Training.date_time > datetime.now())\
        .order_by(Training.date_time)\
        .all()
    
    if not trainings:
        await query.answer("–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        message = "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        reply_markup = get_standard_keyboard()
        await query.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    message = "üë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:*\n\n"
    
    for training in trainings:
        message += f"üìÖ *{training.date_time.strftime('%d.%m.%Y %H:%M')}*\n"
        message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(training.registrations)}/{training.max_participants}\n\n"
        
        if not training.registrations:
            message += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è\n\n"
            continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –≤—Ä–∞—Ç–∞—Ä–∏, –ø–æ—Ç–æ–º –∏–≥—Ä–æ–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ –º–∞–π–∫–∞–º
        goalkeepers = []
        light_first_team = []
        dark_first_team = []
        light_second_team = []
        dark_second_team = []
        unassigned = []
        
        for reg in training.registrations:
            display_name = reg.display_name or reg.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'
            
            if reg.goalkeeper:
                goalkeepers.append((display_name, reg.jersey_type, reg.paid))
            elif reg.team_assigned and reg.jersey_type and reg.team_type:
                if reg.jersey_type.value == 'light' and reg.team_type.value == 'first':
                    light_first_team.append((display_name, reg.paid))
                elif reg.jersey_type.value == 'dark' and reg.team_type.value == 'first':
                    dark_first_team.append((display_name, reg.paid))
                elif reg.jersey_type.value == 'light' and reg.team_type.value == 'second':
                    light_second_team.append((display_name, reg.paid))
                elif reg.jersey_type.value == 'dark' and reg.team_type.value == 'second':
                    dark_second_team.append((display_name, reg.paid))
            else:
                unassigned.append((display_name, reg.paid))
        
        # –í—ã–≤–æ–¥–∏–º –≤—Ä–∞—Ç–∞—Ä–µ–π
        if goalkeepers:
            message += "ü•Ö *–í—Ä–∞—Ç–∞—Ä–∏:*\n"
            for name, jersey_type, paid in goalkeepers:
                jersey_emoji = "‚ö™" if jersey_type and jersey_type.value == 'light' else "‚ö´"
                message += f"‚Ä¢ {escape_markdown(name)} {jersey_emoji}\n"
            message += "\n"
        
        # –í—ã–≤–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –ø–µ—Ä–≤–æ–π –ø—è—Ç–µ—Ä–∫–∏ (—Å–≤–µ—Ç–ª—ã–µ)
        if light_first_team:
            message += "‚ö™ *1-–∞—è –ø—è—Ç–µ—Ä–∫–∞ (—Å–≤–µ—Ç–ª—ã–µ):*\n"
            for name, paid in light_first_team:
                message += f"‚Ä¢ {escape_markdown(name)}\n"
            message += "\n"
        
        # –í—ã–≤–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –ø–µ—Ä–≤–æ–π –ø—è—Ç–µ—Ä–∫–∏ (—Ç–µ–º–Ω—ã–µ)
        if dark_first_team:
            message += "‚ö´ *1-–∞—è –ø—è—Ç–µ—Ä–∫–∞ (—Ç–µ–º–Ω—ã–µ):*\n"
            for name, paid in dark_first_team:
                message += f"‚Ä¢ {escape_markdown(name)}\n"
            message += "\n"
        
        # –í—ã–≤–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –≤—Ç–æ—Ä–æ–π –ø—è—Ç–µ—Ä–∫–∏ (—Å–≤–µ—Ç–ª—ã–µ)
        if light_second_team:
            message += "‚ö™ *2-–∞—è –ø—è—Ç–µ—Ä–∫–∞ (—Å–≤–µ—Ç–ª—ã–µ):*\n"
            for name, paid in light_second_team:
                message += f"‚Ä¢ {escape_markdown(name)}\n"
            message += "\n"
        
        # –í—ã–≤–æ–¥–∏–º –∏–≥—Ä–æ–∫–æ–≤ –≤—Ç–æ—Ä–æ–π –ø—è—Ç–µ—Ä–∫–∏ (—Ç–µ–º–Ω—ã–µ)
        if dark_second_team:
            message += "‚ö´ *2-–∞—è –ø—è—Ç–µ—Ä–∫–∞ (—Ç–µ–º–Ω—ã–µ):*\n"
            for name, paid in dark_second_team:
                message += f"‚Ä¢ {escape_markdown(name)}\n"
            message += "\n"
        
        # –í—ã–≤–æ–¥–∏–º –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if unassigned:
            message += "‚ùì *–ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ:*\n"
            for name, paid in unassigned:
                message += f"‚Ä¢ {escape_markdown(name)}\n"
            message += "\n"
        
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.answer()
    await query.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')

async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ callback_data
    reg_id = int(query.data.split('_')[1])
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    registration = db_session.query(Registration)\
        .filter_by(id=reg_id, user_id=user_id)\
        .first()
    
    if registration:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º display_name –≤ UserPreferences –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if registration.display_name:
            user_prefs = db_session.query(UserPreferences).filter_by(user_id=user_id).first()
            if not user_prefs:
                user_prefs = UserPreferences(user_id=user_id)
                db_session.add(user_prefs)
            user_prefs.display_name = registration.display_name
        
        db_session.delete(registration)
        db_session.commit()
        await query.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        message = "–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        reply_markup = get_standard_keyboard()
        await query.message.reply_text(message, reply_markup=reply_markup)
    else:
        await query.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def view_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    training = db_session.query(Training)\
        .filter(Training.date_time > datetime.now())\
        .order_by(Training.date_time)\
        .first()
    
    if not training:
        message = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
        reply_markup = get_standard_keyboard()
        await update.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    registrations = db_session.query(Registration)\
        .filter_by(training_id=training.id)\
        .all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
    message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(registrations)}/{training.max_participants}):\n\n"
    
    if registrations:
        for i, reg in enumerate(registrations, 1):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º display_name –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ username
            display_name = reg.display_name or reg.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if reg.team_assigned:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É—Ç–±–æ–ª–∫–µ –∏ –∫–æ–º–∞–Ω–¥–µ
                if reg.jersey_type:
                    if reg.jersey_type.value == 'light':
                        jersey_info = "‚ö™"
                    else:
                        jersey_info = "‚ö´"
                    message += f"{i}. {display_name} {jersey_info}"
                else:
                    message += f"{i}. {display_name}"
                
                if reg.team_type:
                    if reg.team_type.value == 'first':
                        team_info = "1Ô∏è‚É£"
                    else:
                        team_info = "2Ô∏è‚É£"
                    message += f" {team_info}\n"
                else:
                    message += "\n"
            else:
                # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ)
                surname = display_name.split()[-1] if display_name else "–ë–µ–∑ –∏–º–µ–Ω–∏"
                message += f"{i}. {surname}\n"
    else:
        message += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è"
    
    reply_markup = get_info_keyboard()
    await update.message.reply_text(message, reply_markup=reply_markup)

async def show_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    user_id = update.effective_user.id
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    commands = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/commands - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/participants - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–ª–∏–∂–∞–π—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
"""
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id in Config.ADMIN_IDS:
        admin_commands = """
üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:

/test_weekly_post - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç
"""
        commands += admin_commands
    
    reply_markup = get_standard_keyboard()
    await update.message.reply_text(commands, reply_markup=reply_markup)

@handle_telegram_errors
async def test_weekly_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in Config.ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        success = await send_weekly_training_post(context.bot)
        
        if success:
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CHANNEL_ID –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def return_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    reply_markup = get_standard_keyboard()
    await query.answer()
    await query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

async def start_bot():
    token = Config.TELEGRAM_TOKEN
    if not token:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("commands", show_commands))
    application.add_handler(CommandHandler("participants", view_participants))
    application.add_handler(CommandHandler("test_weekly_post", test_weekly_post))
    application.add_handler(CallbackQueryHandler(register_training, pattern="^register_\d+$"))
    application.add_handler(CallbackQueryHandler(show_schedule, pattern="^schedule$"))
    application.add_handler(CallbackQueryHandler(show_my_registrations, pattern="^my_registrations$"))
    application.add_handler(CallbackQueryHandler(cancel_registration, pattern="^cancel_\d+$"))
    application.add_handler(CallbackQueryHandler(mark_payment, pattern="^pay_\d+$"))
    application.add_handler(CallbackQueryHandler(handle_mark_payment, pattern="^mark_payment$"))
    application.add_handler(CallbackQueryHandler(handle_cancel_registration, pattern="^cancel_registration$"))
    application.add_handler(CallbackQueryHandler(view_training_participants, pattern="^view_participants$"))
    application.add_handler(CallbackQueryHandler(return_to_start, pattern="^start$"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        await application.initialize()
        await application.start()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º polling —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        await application.updater.start_polling(
            drop_pending_updates=True,
            allowed_updates=['message', 'callback_query'],
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30,
            pool_timeout=30
        )
        
        print("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        await start_weekly_post_scheduler(application.bot)
        
        return application
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        try:
            await application.stop()
            await application.shutdown()
        except:
            pass
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
async def handle_mark_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏–ª'"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–∫–ª—é—á–∞—è –≤—Ä–∞—Ç–∞—Ä–µ–π)
    unpaid_registrations = db_session.query(Registration)\
        .join(Training)\
        .filter(Registration.user_id == user_id)\
        .filter(Registration.paid == False)\
        .filter(Registration.goalkeeper == False)\
        .order_by(Training.date_time)\
        .all()
    
    if not unpaid_registrations:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –ø–æ –¥–∞—Ç–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    earliest_registration = unpaid_registrations[0]
    earliest_registration.paid = True
    db_session.commit()
    
    training_date = earliest_registration.training.date_time.strftime('%d.%m.%Y %H:%M')
    await query.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ {training_date} –æ—Ç–º–µ—á–µ–Ω–∞!")
    await show_my_registrations(update, context)

async def handle_cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å'"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_registrations = db_session.query(Registration)\
        .join(Training)\
        .filter(Registration.user_id == user_id)\
        .filter(Training.date_time > datetime.now())\
        .order_by(Training.date_time)\
        .all()
    
    if not active_registrations:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å, –æ—Ç–º–µ–Ω—è–µ–º –µ—ë —Å—Ä–∞–∑—É
    if len(active_registrations) == 1:
        registration = active_registrations[0]
        db_session.delete(registration)
        db_session.commit()
        await query.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!")
        await show_my_registrations(update, context)
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
    message = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n\n"
    keyboard = []
    
    for i, reg in enumerate(active_registrations, 1):
        message += f"{i}. üìÖ {reg.training.date_time.strftime('%d.%m.%Y %H:%M')}\n"
        keyboard.append([InlineKeyboardButton(
            f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {reg.training.date_time.strftime('%d.%m %H:%M')}",
            callback_data=f'cancel_{reg.id}'
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='my_registrations')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.answer()
    await query.message.reply_text(message, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ
async def send_payment_reminder(registration: Registration, training: Training, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–∞—Ç–∞—Ä–µ–π - –∏–º –Ω–µ –Ω—É–∂–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        if registration.goalkeeper:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤—Ä–∞—Ç–∞—Ä—è {registration.user_id}")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        training_date = training.date_time.strftime('%d.%m.%Y –≤ %H:%M')
        display_name = registration.display_name or registration.username or '–£—á–∞—Å—Ç–Ω–∏–∫'
        
        message = f"üí≥ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ*\n\n"
        message += f"–ü—Ä–∏–≤–µ—Ç, {escape_markdown(display_name)}!\n\n"
        message += f"üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {training_date}\n"
        message += f"‚è∞ –ü—Ä–æ—à–ª–æ —É–∂–µ 1.5 —á–∞—Å–∞ —Å –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        message += f"üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        message += f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = {
            'inline_keyboard': [
                [{'text': '‚úÖ –û–ø–ª–∞—Ç–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'callback_data': f'pay_{registration.id}'}],
                [{'text': 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', 'callback_data': 'my_registrations'}]
            ]
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=registration.user_id,
            text=message,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard['inline_keyboard'])
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        registration.last_payment_reminder = datetime.now()
        db_session.commit()
        
        logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É {display_name} (ID: {registration.user_id})")
        return True
        
    except Forbidden as e:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {registration.user_id} ({display_name}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
        registration.last_payment_reminder = datetime.now()
        db_session.commit()
        return False
    except BadRequest as e:
        error_msg = str(e)
        if "chat not found" in error_msg.lower():
            logger.warning(f"‚ö†Ô∏è –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {registration.user_id} ({display_name}) –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞.")
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
            registration.last_payment_reminder = datetime.now()
            db_session.commit()
        else:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {registration.user_id}: {e}")
        return False
    except (NetworkError, TimedOut) as e:
        logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {registration.user_id}: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {registration.user_id}: {e}")
        return False

async def check_payment_reminders(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"""
    try:
        from datetime import timedelta
        
        current_time = datetime.now()
        # –ò—â–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏—Å—å –±–æ–ª–µ–µ 1.5 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        reminder_time = current_time - timedelta(hours=1, minutes=30)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏—Å—å –±–æ–ª–µ–µ 1.5 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        trainings_to_check = db_session.query(Training)\
            .filter(Training.date_time <= reminder_time)\
            .all()
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ. –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(trainings_to_check)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        for training in trainings_to_check:
            time_since_start = current_time - training.date_time
            logger.debug(f"   üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {training.id}: {training.date_time.strftime('%d.%m.%Y %H:%M')} (–ø—Ä–æ—à–ª–æ: {time_since_start})")
        
        total_reminders_sent = 0
        total_blocked_users = 0
        
        for training in trainings_to_check:
            # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –≤—Ä–∞—Ç–∞—Ä–µ–π)
            unpaid_registrations = db_session.query(Registration)\
                .filter(Registration.training_id == training.id)\
                .filter(Registration.paid == False)\
                .filter(Registration.goalkeeper == False)\
                .all()
            
            logger.debug(f"   üë• –ù–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ {training.id}: {len(unpaid_registrations)}")
            
            for registration in unpaid_registrations:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                should_send_reminder = False
                
                if registration.last_payment_reminder is None:
                    # –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    should_send_reminder = True
                    logger.info(f"      üí≥ –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {registration.user_id}")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à—ë–ª –ª–∏ —á–∞—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    time_since_last_reminder = current_time - registration.last_payment_reminder
                    if time_since_last_reminder >= timedelta(hours=1):
                        should_send_reminder = True
                        logger.info(f"      ‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {registration.user_id} (–ø—Ä–æ—à–ª–æ: {time_since_last_reminder})")
                    else:
                        logger.debug(f"      ‚è≥ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {registration.user_id} (–ø—Ä–æ—à–ª–æ: {time_since_last_reminder})")
                
                if should_send_reminder:
                    success = await send_payment_reminder(registration, training, bot)
                    if success:
                        total_reminders_sent += 1
        
        logger.info(f"üìä –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ:")
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total_reminders_sent}")
        
        return total_reminders_sent
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ: {e}")
        return 0 