import asyncio
import logging
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import NetworkError, TimedOut, BadRequest
from ..config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

async def send_weekly_training_post(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É"""
    try:
        if not Config.CHANNEL_ID:
            logger.warning("CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
            return False
            
        if not Config.WEEKLY_POST_ENABLED:
            logger.info("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = """üèí –¢—Ä–µ–Ω–µ—Ä–æ–≤–∫–∞
–ó–∞–≤—Ç—Ä–∞, –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫. 
–ù–∞—á–∞–ª–æ –≤ 19.30-21.00
–°—Ç–æ–∏–º–æ—Å—Ç—å 800-1000‚ÇΩ"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø–∏—Å–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üí¨ –ó–∞–ø–∏—Å—å —É –±–æ—Ç–∞", 
                url="https://t.me/genhokmanager_bot?start=register"
            )]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
        await bot.send_message(
            chat_id=Config.CHANNEL_ID,
            text=message,
            message_thread_id=Config.MESSAGE_THREAD_ID,
            reply_markup=keyboard
        )
        
        logger.info(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {Config.CHANNEL_ID}")
        return True
        
    except NetworkError as e:
        logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        return False
    except TimedOut as e:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        return False
    except BadRequest as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        return False

def get_next_monday_11am():
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 11:00"""
    now = datetime.now()
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    days_ahead = 0 - now.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    if days_ahead <= 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏–ª–∏ —É–∂–µ –ø—Ä–æ—à–µ–ª
        days_ahead += 7  # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    
    next_monday = now + timedelta(days=days_ahead)
    next_monday = next_monday.replace(hour=11, minute=0, second=0, microsecond=0)
    
    return next_monday

async def weekly_post_scheduler(bot):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
    
    while True:
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ 11:00
            next_post_time = get_next_monday_11am()
            now = datetime.now()
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            if next_post_time <= now:
                next_post_time += timedelta(days=7)
            
            wait_seconds = (next_post_time - now).total_seconds()
            logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {next_post_time.strftime('%d.%m.%Y %H:%M')}")
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds/3600:.1f} —á–∞—Å–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞")
            
            # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await asyncio.sleep(wait_seconds)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
            success = await send_weekly_training_post(bot)
            if success:
                logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
            # –ñ–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(3600)

async def start_weekly_post_scheduler(bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    if not Config.WEEKLY_POST_ENABLED:
        logger.info("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    if not Config.CHANNEL_ID:
        logger.warning("CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(weekly_post_scheduler(bot))
    logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
